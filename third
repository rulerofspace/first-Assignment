#include <iostream>
#include <stdexcept>

template <typename T>
class SimpleVector {
private:
    T* arr;         // 배열을 저장할 포인터
    int capacity;   // 배열의 크기
    int currentSize; // 현재 원소의 개수

public:
    // 기본 생성자: 크기 10의 배열을 생성
    SimpleVector() : capacity(10), currentSize(0) {
        arr = new T[capacity];
    }

    // 크기를 받는 생성자
    SimpleVector(int size) : capacity(size), currentSize(0) {
        arr = new T[capacity];
    }

    // 소멸자: 동적 메모리 해제
    ~SimpleVector() {
        delete[] arr;
    }

    // 배열의 끝에 원소를 추가하는 함수
    void push_back(const T& value) {
        if (currentSize < capacity) {
            arr[currentSize] = value;
            currentSize++;
        }
        // 배열이 꽉 찼을 때는 아무 동작도 하지 않음
    }

    // 배열의 끝에서 원소를 제거하는 함수
    void pop_back() {
        if (currentSize > 0) {
            currentSize--;
        }
        // 배열이 비어있을 때는 아무 동작도 하지 않음
    }

    // 현재 배열의 원소 개수를 반환하는 함수
    int size() const {
        return currentSize;
    }

    // 배열의 크기를 반환하는 함수
    int capacity() const {
        return capacity;
    }
};

int main() {
    // 기본 생성자 호출
    SimpleVector<int> vec;
    vec.push_back(1);
    vec.push_back(2);
    vec.push_back(3);

    std::cout << "Size: " << vec.size() << std::endl;    // 3
    std::cout << "Capacity: " << vec.capacity() << std::endl;  // 10

    vec.pop_back();
    std::cout << "Size after pop_back: " << vec.size() << std::endl; // 2

    // 숫자를 받는 생성자 호출
    SimpleVector<int> vec2(5);
    vec2.push_back(10);
    vec2.push_back(20);

    std::cout << "Size of vec2: " << vec2.size() << std::endl;  // 2
    std::cout << "Capacity of vec2: " << vec2.capacity() << std::endl;  // 5

    return 0;
}
